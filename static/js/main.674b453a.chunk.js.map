{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Schedule","props","state","lastSunday","logs","className","style","position","this","React","Component","OverlayActions","dayStyle","givenDate","currentDate","Date","dateNum","getDate","dayName","toDateString","substr","setDate","setMilliseconds","setSeconds","setMinutes","setHours","getLastSunday","slots","map","log","ScheduleSlot","key","timestamp","dayPx","sunday","event","currentDayTime","daysPastSun","toLocaleDateString","topPosition","getHours","getMinutes","leftPosition","ate","peed","pooped","slept","walked","woke","left","top","BaseTable","times","width","fontSize","baseHeaders","day","BaseHeader","baseRows","startTime","endTime","timeDifference","valueOf","i","push","getTimes","time","BaseRow","toLocaleTimeString","VinnyAction","handleClick","bind","action","preventDefault","divStyle","backgroundColor","toggledOn","onClick","name","OptionMenu","handleSubmit","toggleAte","togglePeed","togglePooped","toggleWalked","toggleWoke","toggleSlept","alreadyAte","setState","alreadyPeed","alreadyPooped","alreadyWalked","alreadyWoke","alreadySlept","formData","FormData","target","formTime","get","hours","substring","minutes","toLocaleString","reset","window","location","reload","onSubmit","type","id","pattern","value","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.674b453a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nconst API_URL = \"http://localhost:5000/actions\";\n\nfunction App() {\n  \n  return (\n    <div>\n      <h1 className=\"title\">Vinny Scheduler</h1>\n      <OptionMenu />\n      <br />\n      <br />\n      <Schedule />\n    </div>\n  );\n}\n\n//Now just need to create a way to get the actions and display them in a nice schedule.\n//Clean out the database.\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lastSunday: null,\n      logs: null\n    };\n  }\n\n  //FINISH THIS FUNCTION.\n  componentDidMount() {\n    // getSchedule()\n    //   .then( res => res.json() )\n    //   .then( result => {\n    //     this.setState( //NEED TO CHANGE THIS TO BE A SINGLE OBJECt not LAStSUNDAY AND LOGS BECAUSE IT IS UPDATING BEFORE LASTSUNDAY GETS UPDATED.\n    //       {\n    //         logs: result.entries\n    //       } );\n    //   });\n  }\n  //Display it too. Probably by using child components.\n  //One component creates the grid (7 days, 4am to 10 pm every day, 10 min intervals or dynamic?).\n  //Second component creates the overlays given the action object (can line up directly or dynamically)\n\n  render() {\n    return(\n      <div className=\"schedule\" style={{position: 'relative'}}>\n        <BaseTable />\n        <OverlayActions logs ={this.state.logs} />\n      </div>\n    );\n  }\n}\n\n\nclass OverlayActions extends React.Component {\n\n  render() {\n    let dayStyle = [74, 178, 282, 388, 496, 602, 708]; //Pixels //Move to the schedule slot?\n\n    const logs = this.props.logs;\n    const lastSunday = getLastSunday();\n    \n    let slots = null;\n\n    if( logs !== null ) { \n      \n      slots = logs.map( (log) => (\n        \n        //Need to figure out how to determine the column of the current day...\n        <ScheduleSlot key={\"slot\" + log.timestamp} dayPx={dayStyle} sunday={new Date(lastSunday)} event={log} />\n      ));\n    }\n\n    return(\n      <div>{slots ? slots : 'loading'}</div>\n    );\n  }\n}\n\nfunction ScheduleSlot(props) {\n  \n  const currentDayTime = new Date(props.event.timestamp);\n  \n  let lastSunday = props.sunday; //Date Object.\n  let dateNum = lastSunday.getDate();\n\n  let daysPastSun = 0;\n  while( currentDayTime.toLocaleDateString() !== lastSunday.toLocaleDateString() ) {\n    lastSunday.setDate(++dateNum);\n    daysPastSun++;\n  }\n\n  //If top position doesn't work out very well, can always do it as a percentage of the height.\n  //Calculate the top position.\n  const topBasePx = 31;\n  const hoursPx = (currentDayTime.getHours() - 4) * 4 * 31;\n  const minsPx = (currentDayTime.getMinutes() / 60) * 4 * 29;\n  const topPosition = (topBasePx + hoursPx + minsPx) + 'px';\n\n  //Left px Poisition.\n  const leftPosition = props.dayPx[daysPastSun];\n  \n  //Variables for the emoji text.\n  const ate = (props.event.ate == 'true' ? true : false);\n  const peed = (props.event.peed == 'true' ? true : false);\n  const pooped = (props.event.pooped == 'true' ? true : false);\n  const slept = (props.event.slept == 'true' ? true : false);\n  const walked = (props.event.walked == 'true' ? true : false);\n  const woke = (props.event.woke == 'true' ? true : false);\n\n  //🍖🔫💩🚶🏻‍♂️☀️🌙\n\n  return(\n    <div className=\"scheduleSlot\" style={{left: leftPosition, top: topPosition}}>\n    {ate ? '🍖' : '\\u00A0'}\n    {peed ? '🔫' : '\\u00A0'}\n    {pooped ? '💩' : '\\u00A0'}\n    {slept ? '🚶🏻‍♂️' : '\\u00A0'}\n    {walked ? '☀️' : '\\u00A0'}\n    {woke ? '🌙' : '\\u00A0'}\n    </div>\n  );\n}\n\nclass BaseTable extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      times: null\n    };\n  }\n  \n  render() {\n    const style = {width: \"10%\", fontSize: \"calc(2vmin)\"};\n\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    const baseHeaders = days.map( (day) =>\n      <BaseHeader key={day} day={day} style={style} />\n    );\n\n    const times = getTimes();\n    const baseRows = times.map( (time) => \n      <BaseRow key={time.toLocaleTimeString()} time={time} style={style} />\n    );\n\n    return(\n      <div className=\"scheduleSkeleton\">\n        <table style={{width: \"800px\"}}>\n          <thead>\n            <tr className=\"headerRow\">\n              <td style={{width: \"5%\"}}></td>\n              {baseHeaders}\n            </tr>\n          </thead>\n          <tbody>\n            {baseRows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n//alternate time display props.time.toLocaleTimeString()\nfunction BaseRow(props){\n  return (\n    <tr className=\"baseRow\">\n      <td className=\"baseCell\">\n      {\n        (props.time.getHours() < 10 ? '0' + props.time.getHours() : props.time.getHours() ) + ':' +\n        (props.time.getMinutes() < 10 ? '0' + props.time.getMinutes() : props.time.getMinutes() )\n      }\n      </td>\n    </tr>\n  );\n}\n\nfunction BaseHeader(props){\n  return <th style={props.style}>{props.day}</th>\n}\n\nclass VinnyAction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    this.props.action();\n    event.preventDefault();\n  }\n\n  render() {\n\n    const isToggleOn = this.props.toggledOn;\n    const divStyle = {\n      backgroundColor: isToggleOn ? 'yellow' : 'white'\n    }\n    \n    return(\n      <button onClick={this.handleClick}\n              className='main-button'\n              style={divStyle}\n              >\n        {this.props.name}\n      </button>\n    )\n  }\n\n}\n\n\nclass OptionMenu extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      ate: false,\n      peed: false,\n      pooped: false,\n      walked: false,\n      woke: false,\n      slept: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.toggleAte = this.toggleAte.bind(this);\n    this.togglePeed = this.togglePeed.bind(this);\n    this.togglePooped = this.togglePooped.bind(this);\n    this.toggleWalked = this.toggleWalked.bind(this);\n    this.toggleWoke = this.toggleWoke.bind(this);\n    this.toggleSlept = this.toggleSlept.bind(this);\n  }\n\n\n  toggleAte() {\n    const alreadyAte = this.state.ate; \n    this.setState( {ate: !alreadyAte} );\n  }\n\n  togglePeed() {\n    const alreadyPeed = this.state.peed;\n    this.setState( {peed: !alreadyPeed } );\n  }\n\n  togglePooped() {\n    const alreadyPooped = this.state.pooped;\n    this.setState( {pooped: !alreadyPooped} );\n  }\n\n  toggleWalked() {\n    const alreadyWalked = this.state.walked;\n    this.setState( {walked: !alreadyWalked} );\n  }\n\n  toggleWoke() {\n    const alreadyWoke = this.state.woke;\n    this.setState( {woke: !alreadyWoke} );\n  }\n\n  toggleSlept() {\n    const alreadySlept = this.state.slept;\n    this.setState( {slept: !alreadySlept} );\n  }\n\n  handleSubmit(event) {\n    //Process and validate the time.\n    const formData = new FormData(event.target);\n    let timestamp = new Date(); //Info events are always from the current day.\n\n    const formTime = formData.get('timestamp');\n\n    if( formTime ) {\n      const hours = formTime.substring(0, 2);\n      const minutes = formTime.substring(3, 5);\n\n      timestamp.setHours(hours);\n      timestamp.setMinutes(minutes);\n    }\n\n    //Get the current state of the actions.\n    const status = {\n      ate: this.state.ate,\n      peed: this.state.peed,\n      pooped: this.state.pooped,\n      walked: this.state.walked,\n      woke: this.state.woke,\n      slept: this.state.slept,\n      timestamp: timestamp.toLocaleString()\n      \n    }\n    //sendActions(status);\n\n    //Reset the VinnyAction buttons.\n    this.setState({\n      ate: false,\n      peed: false,\n      pooped: false,\n      walked: false,\n      woke: false,\n      slept: false\n    });\n\n    //Reset the rest of the form.\n    event.target.reset();\n    window.location.reload();\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"options-form\" onSubmit={this.handleSubmit}>\n\n        <input type=\"time\" id=\"timestamp\" name=\"timestamp\" pattern=\"[0-9]{2}:[0-9]{2}\"></input>\n\n        <br />\n        <br />\n\n        <VinnyAction \n          id=\"eat\"\n          name=\"🍖\"\n          action={this.toggleAte}\n          toggledOn={this.state.ate}\n        />\n        <VinnyAction \n          id=\"pee\"\n          name=\"🔫\"\n          action={this.togglePeed}\n          toggledOn={this.state.peed}\n        />\n        <VinnyAction \n          id=\"poop\"\n          name=\"💩\"\n          action={this.togglePooped}\n          toggledOn={this.state.pooped}\n        />\n        <VinnyAction \n          id=\"walk\"\n          name=\"🚶🏻‍♂️\"\n          action={this.toggleWalked}\n          toggledOn={this.state.walked}\n        />\n        <VinnyAction \n          id=\"woke\"\n          name=\"☀️\"\n          action={this.toggleWoke}\n          toggledOn={this.state.woke}\n        />\n        <VinnyAction \n          id=\"slept\"\n          name=\"🌙\"\n          action={this.toggleSlept}\n          toggledOn={this.state.slept}\n        />\n\n      <br />\n      <br />\n      <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n\n}\n\nasync function getSchedule() {\n  const response = await fetch( API_URL, {\n    method: 'GET',\n  });\n  \n  return await response;\n}\n\n\nasync function sendActions( actions ) {\n  const response = await fetch( API_URL, {\n    method: 'POST',\n    body: JSON.stringify(actions),\n    headers: {\n      'content-type': 'application/json'\n    }\n  });\n\n  if( !response.ok ){\n      console.log('error in posting actions.');\n  } else {\n    console.log('successful.');\n  }\n\n  const json = await response.json();\n\n  console.log(json);\n  console.log(json.timestamp);\n}\n\nfunction getTimes() {\n  let startTime = new Date();\n  startTime.setHours(4);\n  startTime.setMinutes(0);\n  startTime.setSeconds(0);\n  startTime.setMilliseconds(0);\n\n  let endTime = new Date(startTime);\n  endTime.setHours(24);\n\n  const timeInterval = 900000; //15 Minutes in Milliseconds.\n  \n  let times = [];\n  let timeDifference = endTime.valueOf() - startTime.valueOf();\n\n\n  for( let i = 0; i <= timeDifference; i += timeInterval ){\n    times.push( new Date(startTime) );\n    startTime.setMilliseconds(timeInterval);\n  }\n\n  return times;\n}\n\nfunction getLastSunday( givenDate = null ) {\n  let currentDate = givenDate;\n\n  if(currentDate === null) {\n      currentDate = new Date(); //Sets it to today.\n  }\n\n  let dateNum = currentDate.getDate();\n  let dayName = currentDate.toDateString().substr(0,3); //Find best way to get day of week.\n\n  while(dayName !== \"Sun\" ) {\n      currentDate.setDate(--dateNum);\n      dayName = currentDate.toDateString().substr(0,3);\n  }\n\n  currentDate.setMilliseconds(0);\n  currentDate.setSeconds(0);\n  currentDate.setMinutes(0);\n  currentDate.setHours(3);\n\n  return currentDate;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}